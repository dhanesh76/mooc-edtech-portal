//controller
1.create a /login end point 

2.Get Authentication object using AuthenticationManager  
    Authentication auth = AuthenticationManager
        .authenticate(new UsernamePasswordAuthenticationToken(#username, #password));

3.Check whether authenticated or not 
    if(auth.isAuthenticated())
        return jwtService.generateToken(username);  //on success return the JWT Token 
    else
        do some action

4.Get the hold on the AuthenticationManager used in step 2 by creating a bean of it 
//config
//5
@Bean 
AuthenticationManager authManager(AuthenticationConfiguration config){
    return config.getAuthenticationManager();
}


//Service 
//6
class JwtService{
    generateToken(String username){
        //claims 
        Map<String, Object> claims = new HashMap<>();
        
        return Jwts.builder()
            .setClaims(claims)
            .setSubject(username)
            .setIssuedAt(new Date())
            .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10)) // 10 hours
            .signWith(getKey(), //need to be implemented 
                 SignatureAlgorithm.HS256)
            .compact();
    }
}

//7.Generaztion of the key for signing the JWT
Key getKey() {
    String SECRETE_KEY = generateSecreteKey();
    
    return Keys.hmacShaKeyFor(Decoders.BASE64.decode(SECRETE_KEY));
}

//8.secrete to generate the key 
String generateSecreteKey(){

    KeyGenerator keyGen = KeyGenerator.getInstance("HmacSHA256");
    SecreteKey secreteKey = keyGen.generateKey();

    return BASE64.getEncoder().encodeToString(secreteKey.getEncoded());
}

/*
    The above implementation will only verify the user credentials and generate a JWT token.
    but still we need to implement the filter to verify the JWT token in the request header.

    User will send the JWT token in the request header as Authorization Bearer token.
    We need to implement a filter that will intercept the request and verify the JWT token.
    This filter will be added to the security configuration.

    For every request 
        User send JWT Token -> We verify the token -> If valid, we allow the request to proceed
*/

//9.Filter to verify the JWT token, add in the Security Filter Chain
securityFilterChain(HttpSecurity http) throws Exception {
    http
        .csrf().disable()
        .authorizeRequests()
            .antMatchers("/login").permitAll() // Allow login endpoint without authentication
            .anyRequest().authenticated() // All other requests require authentication
        .and()
        .addFilterBefore(new JwtAuthenticationFilter(jwtService), UsernamePasswordAuthenticationFilter.class);   
    return http.build();
}

//10. JwtAuthenticationFilter to verify the JWT token
class JwtAuthenticationFilter extends OncePerRequestFilter {

    private final JwtService jwtService;

    public JwtAuthenticationFilter(JwtService jwtService) {
        this.jwtService = jwtService;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        
        /*
            request will have the JWT token in the Authorization header as Bearer token.
        */

        String authHeader = request.getHeader("Authorization");
        
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            String username = jwtService.extractUsername(token); // Implement extractUsername method in JwtService

            if (username != null && 
                SecurityContextHolder.getContext().getAuthentication() == null ) { //if user already authenticated do nothing 

                UserDetails userDetails = context.getBean(UserDetailsService.class).loadUserByUsername(username);
                
                if(jwtService.validateToken(token, userDetails)) { // Implement validateToken method in JwtService
                    
                    UsernamePasswordAuthenticationToken authentication = 
                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());

                    // Set the details of the authentication
                    //for what service access this request has been authenticated
                    authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                    // Set the authentication in the security context
                    SecurityContextHolder.getContext().setAuthentication(authentication);
                }
            }
        }
        // Continue the filter chain
        filterChain.doFilter(request, response);
    }
}

//11. Implement extractUsername and validateToken methods in JwtService
class JwtService {
    
    // Existing methods...


    private claims extractAllClaims(String token) {
        return Jwts.parserBuilder()
            .setSigningKey(getKey())
            .build()
            .parseClaimsJws(token)
            .getBody();
    }

    private <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }
    
    public boolean validateToken(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }
}